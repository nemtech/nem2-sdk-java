/*
 * Copyright 2018 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:3.0.1'
    }
}

plugins {
    id "org.sonarqube" version "2.7"
    id 'com.github.kt3k.coveralls' version '2.8.4'
    id 'ch.netzwerg.release' version '1.2.5'
    id 'org.ajoberstar.git-publish' version '0.3.3'
    id 'jacoco'
}

apply plugin: 'nebula-aggregate-javadocs'


def artifactVersion = rootProject.file('version.txt').text.trim()

ext {
    vertxVersion = "3.5.0"
    rxjavaVersion = "2.1.7"
    junitVersion = "5.4.0"
    restApiVersion = "0.7.19"
    jackson_version = "2.9.9"
    junit4Version = '4.12'
    jackson_databind_version = "2.9.9"
}

repositories {
    mavenLocal()
    mavenCentral()
}

def getPropertyValue(key) {
    def value = project.hasProperty(key) ? project[key] : System.getenv(key)
    return value?.trim() == '' ? null : value
}

def ossrhUsername = getPropertyValue('ossrhUsername');
def ossrhPassword = getPropertyValue('ossrhPassword');

def sonarProjectKey = getPropertyValue('sonarProjectKey');
def sonarLogin = getPropertyValue('sonarLogin');
def sonarOrganization = getPropertyValue('sonarOrganization');
def sonarHostUrl = getPropertyValue('sonarHostUrl');
def sonarBranchName = getPropertyValue('sonarBranchName');

def signingSecretKeyRingFile = getPropertyValue('signingSecretKeyRingFile')
def signingKeyId = getPropertyValue('signingKeyId')
def signingPassword = getPropertyValue('signingPassword')

def githubToken = getPropertyValue('GRGIT_USER')
def repoPath = getPropertyValue('TRAVIS_REPO_SLUG')
def excludedCoverage = ['**catapult**']

allprojects {
    ext."signing.keyId" = signingKeyId
    ext."signing.secretKeyRingFile" = signingSecretKeyRingFile
    ext."signing.password" = signingPassword
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'jacoco'
    apply plugin: 'org.sonarqube'
    apply plugin: 'project-report'
    group 'io.nem'
    sourceCompatibility = 1.8
    version = artifactVersion


    repositories {
        mavenLocal()
        mavenCentral()
    }

    javadoc {
        // options.addBooleanOption('html5', true)
        failOnError = true
        source = sourceSets.main.allJava
        classpath = configurations.compile
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    test {
        exclude '**/**IntegrationTest.class'
        useJUnitPlatform {
            includeEngines 'junit-jupiter'
        }
        testLogging {
            events "skipped", "failed"
        }
    }

    jacocoTestReport {
        reports {
            html.enabled = true // human readable
            xml.enabled = true // required by coveralls
        }
    }

    dependencies {
        // Tests
        testCompile 'org.hamcrest:hamcrest-core:1.3'
        testCompile 'org.hamcrest:hamcrest-library:1.3'
        testCompile 'org.mockito:mockito-all:1.9.5'

        testImplementation(platform("org.junit:junit-bom:$junitVersion"))
        testImplementation("org.junit.jupiter:junit-jupiter:$junitVersion")

    }
    if (signingKeyId != null) {
        apply plugin: 'signing'
        signing {
            sign configurations.archives
        }
    }
    uploadArchives {

        repositories {
            mavenDeployer {
                if (signingKeyId != null) {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project {
                    packaging 'jar'
                    url 'https://github.com/nemtech/nem2-sdk-java'
                    name "${project.name}"
                    description "${project.name} lib for NEM2 sdk Java"

                    scm {
                        connection 'scm:git:https://github.com/nemtech/nem2-sdk-java.git'
                        developerConnection 'scm:svn:https://github.com/nemtech/nem2-sdk-java'
                        url 'https://github.com/nemtech/nem2-sdk-java'
                    }

                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id 'fullcircle23'
                            name 'Ravi Shanker'
                        }
                        developer {
                            id 'rg911'
                            name 'Steven Liu'
                        }
                        developer {
                            id 'fboucquez'
                            name 'Fernando Boucquez'
                        }
                    }
                }
            }
        }
    }
}

project("integration-tests") {
    uploadArchives.enabled = false
}

def publishedProjects = subprojects

task jacocoMerge(type: JacocoMerge) {
    publishedProjects.each { subproject ->
        executionData subproject.tasks.withType(Test)
    }
    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}


task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn publishedProjects.test, jacocoMerge

    additionalSourceDirs.from = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.from = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(publishedProjects.sourceSets.main.output)
    executionData jacocoMerge.destinationFile

    reports {
        html.enabled = true // human readable
        xml.enabled = true // required by coveralls
    }
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: excludedCoverage)
        })
    }
}

coveralls {
    sourceDirs = publishedProjects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    group = 'Coverage reports'
    description = 'Uploads the aggregated coverage report to Coveralls'
    dependsOn jacocoRootReport
}

tasks.coveralls {
    group = 'Coverage reports'
    description = 'Uploads the aggregated coverage report to Coveralls'
    dependsOn jacocoMerge
}

task clean {
    subprojects.each {
        it.afterEvaluate {
            def cleanTask = it.tasks.findByName('clean')
            if (cleanTask) {
                dependsOn(cleanTask)
            }
        }
    }
}


gitPublish {
    if (githubToken) {
        repoUri = "https://github.com/${repoPath}.git".toString()
    } else {
        repoUri = "git@github.com:${repoPath}.git".toString()
    }
    branch = 'gh-pages'
    preserve { include '**/*' }
    commitMessage = "Publishing SDK Javadocs for version ${artifactVersion}".toString()
    contents {
        from(file("$buildDir/docs/javadoc")) {
            into "javadoc/${artifactVersion}".toString()
        }
    }
}

gitPublishPush.dependsOn("aggregateJavadocs")


def gitBranch() {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch
}

release {

}

release.dependsOn subprojects.install

sonarqube {
    properties {
        //       property "sonar.branch.name", sonarBranchName == null ? gitBranch() : sonarBranchName
        property "sonar.projectKey", sonarProjectKey
        property "sonar.projectName", sonarProjectKey
        property "sonar.organization", sonarOrganization
        property "sonar.login", sonarLogin
        property "sonar.host.url", sonarHostUrl
        property "sonar.exclusions", excludedCoverage.join(",")
    }
}
